import random

class KnapsackSolver:
    def __init__(self, max_weight):
        self.max_weight = max_weight
        self.items = []
        self.__init_data()

    def __init_data(self):
        self.add_item("地图", 9, 150)
        self.add_item("指南针", 13, 35)
        self.add_item("水", 153, 200)
        self.add_item("三明治", 50, 160)
        self.add_item("葡萄糖", 15, 60)
        self.add_item("罐头", 68, 45)
        self.add_item("香蕉", 27, 60)
        self.add_item("苹果", 39, 40)
        self.add_item("奶酪", 23, 30)
        self.add_item("啤酒", 52, 10)
        self.add_item("防晒霜", 11, 70)
        self.add_item("相机", 32, 30)
        self.add_item("T恤衫", 24, 15)
        self.add_item("裤子", 48, 10)
        self.add_item("雨伞", 70, 40)
        self.add_item("防水裤子", 42, 70)
        self.add_item("防水外套", 43, 75)
        self.add_item("钱包", 22, 80)
        self.add_item("太阳镜", 7, 20)
        self.add_item("毛巾", 18, 12)
        self.add_item("袜子", 4, 50)
        self.add_item("书", 30, 10)
        # ... 这里添加其他物品，每个物品格式为名称，重量，价值

    def add_item(self, name, weight, value):
            self.items.append((name, weight, value))

    def getValue(self, zeroOneList):
        total_weight = 0
        total_value = 0
        for i in range(len(self.items)):
            if zeroOneList[i] == 1:
                if total_weight + self.items[i][1] <= self.max_weight:
                    total_weight += self.items[i][1]
                    total_value += self.items[i][2]
                else:
                    break
        return total_weight, total_value

    def printItems(self, zeroOneList):
        print("Random Solution:", zeroOneList)
        total_weight, total_value = 0, 0
        for i in range(len(self.items)):
            if zeroOneList[i] == 1:
                item = self.items[i]
                total_weight += item[1]
                total_value += item[2]

                # 检查是否超过最大重量限制
                if total_weight > self.max_weight:
                    print(f"超过最大重量限制，停止添加物品。当前总重量: {total_weight}, 总价值: {total_value}")
                    break

                print(f"增加物品: {item[0]}, 重量: {item[1]}, 价值: {item[2]}")
                print(f"当前累计重量: {total_weight}, 累计价值: {total_value}")
        print(f"最终总重量: {total_weight}, 总价值: {total_value}")

# 实例化类
kp = KnapsackSolver(max_weight=250)  # 假设背包最大重量为250

 # 生成一个随机解决方案
solution = [random.randint(0, 1) for _ in range(len(kp.items))]

# 使用实例方法
kp.printItems(solution)
