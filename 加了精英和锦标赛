# 导入必要的库
import random
import numpy as np

# 数据结构化
 (1, 3): {"rail": 5950, "air": 3420},
    (1, 4): {"rail": 8220, "air": 0},
    # ... 添加所有的运输信息 ...
    (8, 9): {"rail": 3240, "air": 3350}
}

# 运输速度和成本
speeds = {"rail": 80, "air": 150}  # 单位: km/h
costs = {"rail": 8, "air": 20}     # 单位: 每公里成本

def calculate_transport_time_and_cost(city1, city2, mode):
    """计算给定模式下的运输时间和成本"""
    distance = transport_data.get((city1, city2), {}).get(mode, 0)
    if distance == 0:  # 如果没有可用的路线
        return float('inf'), float('inf')  # 返回无限大的时间和成本

    time = distance / speeds[mode]  # 时间 = 距离 / 速度
    cost = distance * costs[mode]   # 成本 = 距离 * 单位成本
    return time, cost

# 整合到优化算法中
def find_optimal_route():
    # 您的优化算法实现...
    # 在寻找最优路线时考虑运输时间和成本

# 定义城市坐标
cities = [(41, 94), (37, 84), (54, 67), (25, 62), (7, 64), (2, 99), (68, 58), (71, 44), (54, 62), (83, 69)]

population_size = 500
n_generations = 620
indpb = 0.015  # 个体变异概率
cxpb = 0.01   # 交叉概率

# 遗传算法部分
def create_route(num_cities, start_city, end_city):
    route = random.sample(range(num_cities), num_cities)
    route.remove(start_city)
    route.remove(end_city)
    route = [start_city] + route + [end_city]
    return route

def init_population(pop_size, num_cities, start_city, end_city):
    return [create_route(num_cities, start_city, end_city) for _ in range(pop_size)]

def calc_route_length(route, distance_matrix):
    return sum(distance_matrix[route[i]][route[i+1]] for i in range(len(route)-1))

def rank_routes(population, distance_matrix):
    fitness_results = {i: calc_route_length(population[i], distance_matrix) for i in range(len(population))}
    return sorted(fitness_results.items(), key=lambda x: x[1])

def selection(ranked_pop, elite_size):
    selection_results = []
    df = pd.DataFrame(np.array(ranked_pop), columns=["Index","Fitness"])
    df['cum_sum'] = df.Fitness.cumsum()
    df['cum_perc'] = 100*df.cum_sum/df.Fitness.sum()
    
    for i in range(0, elite_size):
        selection_results.append(ranked_pop[i][0])
    for i in range(0, len(ranked_pop) - elite_size):
        pick = 100*random.random()
        for i in range(0, len(ranked_pop)):
            if pick <= df.iat[i,3]:
                selection_results.append(ranked_pop[i][0])
                break
    return selection_results

def mating_pool(population, selection_results):
    return [population[i] for i in selection_results]

def breed(parent1, parent2):
    child = []
    child_p1 = []
    child_p2 = []
    
    gene_a = int(random.random() * len(parent1))
    gene_b = int(random.random() * len(parent1))
    
    start_gene = min(gene_a, gene_b)
    end_gene = max(gene_a, gene_b)

    for i in range(start_gene, end_gene):
        child_p1.append(parent1[i])
        
    child_p2 = [item for item in parent2 if item not in child_p1]

    child = child_p1 + child_p2
    return child

def breed_population(mating_pool, elite_size):
    children = []
    length = len(mating_pool) - elite_size
    pool = random.sample(mating_pool, len(mating_pool))

    for i in range(0,elite_size):
        children.append(mating_pool[i])
    
    for i in range(0, length):
        child = breed(pool[i], pool[len(mating_pool)-i-1])
        children.append(child)
    return children

def mutate(individual, mutation_rate):
    for swapped in range(len(individual)):
        if(random.random() < mutation_rate):
            swap_with = int(random.random() * len(individual))
            
            city1 = individual[swapped]
            city2 = individual[swap_with]
            
            individual[swapped] = city2
            individual[swap_with] = city1
    return individual

def mutate_population(population, mutation_rate):
    mutated_pop = []
    
    for ind in range(len(population)):
        mutated_ind = mutate(population[ind], mutation_rate)
        mutated_pop.append(mutated_ind)
    return mutated_pop

def next_generation(current_gen, elite_size, mutation_rate, distance_matrix):
    ranked_pop = rank_routes(current_gen, distance_matrix)
    selection_results = selection(ranked_pop, elite_size)
    matingpool = mating_pool(current_gen, selection_results)
    children = breed_population(matingpool, elite_size)
    next_gen = mutate_population(children, mutation_rate)
    return next_gen

    def update_position(self, bounds):
        for i in range(len(self.position)):
            self.position[i] = self.position[i] + self.velocity[i]

            # 保持在边界内
            if self.position[i] < bounds[0]:
                self.position[i] = bounds[0]
            if self.position[i] > bounds[1]:
                self.position[i] = bounds[1]

    def calculate_distance(self, distance_matrix):
        self.distance = calc_route_length(self.position, distance_matrix)
        if self.distance < self.best_distance:
            self.best_position = list(self.position)
            self.best_distance = self.distance

# 结合GA和PSO的部分
def combined_ga_pso(cities, distance_matrix, pop_size, elite_size, mutation_rate, num_particles, w, c1, c2, num_generations):
    # 初始化GA种群和PSO粒子
    population = init_population(pop_size, len(cities), cities[0], cities[-1])
    particles = [Particle(create_route(len(cities), cities[0], cities[-1])) for _ in range(num_particles)]

    # 初始化全局最佳位置
    global_best_position = None
    global_best_distance = float('inf')

    for _ in range(num_generations):
        # 遗传算法操作
        population = next_generation(population, elite_size, mutation_rate, distance_matrix)
        current_gen_best_route = rank_routes(population, distance_matrix)[0][0]
        current_gen_best_distance = calc_route_length(population[current_gen_best_route], distance_matrix)

        # 粒子群优化操作
        for particle in particles:
            particle.update_velocity(global_best_position if global_best_position else particle.position, w, c1, c2)
            particle.update_position((0, len(cities) - 1))
            particle.calculate_distance(distance_matrix)

            # 更新全局最佳位置
            if particle.best_distance < global_best_distance:
                global_best_position = list(particle.best_position)
                global_best_distance = particle.best_distance

        # 检查是否有新的全局最佳位置
        if current_gen_best_distance < global_best_distance:
            global_best_position = population[current_gen_best_route]
            global_best_distance = current_gen_best_distance

    return global_best_position, global_best_distance
def plot_path_on_map(path, cities_coordinates):
    plt.figure(figsize=(10, 6))
    for i in range(len(path) - 1):
        city1, city2 = path[i], path[i + 1]
        x = [cities_coordinates[city1][0], cities_coordinates[city2][0]]
        y = [cities_coordinates[city1][1], cities_coordinates[city2][1]]
        plt.plot(x, y, 'o-', color='blue')  # 使用蓝色线表示路径

    # 添加城市标签
    for city in range(len(cities_coordinates)):
        plt.text(cities_coordinates[city][0], cities_coordinates[city][1], str(city + 1))

    plt.xlabel('X Coordinate')

